const express = require("express");
const app = express();
const mongoose = require("mongoose");
const { graphqlHTTP } = require("express-graphql");
const NoIntrospection = require('graphql-disable-introspection');
const logger = require("./core/logger");
var cors = require('cors');
const extensions = ({ context }) => {
    return {
        runTime: Date.now() - context.startTime,
    };
};

// Variables
var mongoHost = process.env.MONGODB_HOST || 'mongodb';
var mongoDB = process.env.MONGODB_DB || 'booksDB';
var mongoPort = process.env.MONGODB_PORT || '27017';
var mongoUser = process.env.MONGODB_USER || undefined;
var mongoPW = process.env.MONGODB_PW || undefined;
var port = process.env.PORT || 5045;

// Connect to MongoDB
// Connection string format: mongodb://root:hugo@localhost:27017/scalyDB
// (or alternatively, without authentication: mongodb://localhost:27017/scalyDB)
if (mongoUser) {
    var mongoUri = "mongodb://" + mongoUser + ":" + mongoPW + "@" + mongoHost + ":" + mongoPort + "/" + mongoDB
} else {
    var mongoUri = "mongodb://" + mongoHost + ":" + mongoPort + "/" + mongoDB
}

app.use(logger);

console.log("Trying to connect to " + mongoUri)
mongoose.connect(mongoUri, { useNewUrlParser: true }, function (err) {
    if (err) {
        console.error(`Failed to connect to MongoDB with URI: ${mongoUri}`);
        console.error(err.stack);
        process.exit(1);
    }
    console.log(`Connected to MongoDB with URI: ${mongoUri}`);
});

// Enable cross-origin resource sharing for frontend must be registered before api
app.options('*', cors());
app.use(cors());

var env = app.get('env');

app.listen(port, function (err) {
    if (err) throw err;
    console.log(`Express server listening on port ${port}, in ${env} mode`);
    console.log(`Backend: http://localhost:${port}/api/`);
    console.log(`Frontend (production): http://localhost:${port}/`);
});

// Middleware function to handle introspection query
const disableIntrospection = (req, res, next) => {
    if (req.body && req.body.query && req.body.query.includes('introspectionQuery')) {
        return res.status(403).json({ message: 'Introspection disabled' });
    }
    next();
};

const graphqlSchema = require("./schemas/index");
app.use(
    "/graphql", disableIntrospection,
    graphqlHTTP((request) => {
        return {
            context: { startTime: Date.now() },
            graphiql: false,
            schema: graphqlSchema,
            validationRules: [NoIntrospection],
            extensions,
        };
    })
);